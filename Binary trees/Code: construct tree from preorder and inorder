Code: Construct Tree from Preorder and Inorder
Send Feedback
For a given preorder and inorder traversal of a Binary Tree of type integer stored in an array/list, create the binary tree using the given two arrays/lists. You just need to construct the tree and return the root.
Note:
Assume that the Binary Tree contains only unique elements. 
Input Format:
The first line of input contains an integer N denoting the size of the list/array. It can also be said that N is the total number of nodes the binary tree would have.

The second line of input contains N integers, all separated by a single space. It represents the preorder-traversal of the binary tree.

The third line of input contains N integers, all separated by a single space. It represents the inorder-traversal of the binary tree.
Output Format:
The given input tree will be printed in a level order fashion where each level will be printed on a new line. 
Elements on every level will be printed in a linear fashion. A single space will separate them.
Constraints:
1 <= N <= 10^4
Where N is the total number of nodes in the binary tree.

Time Limit: 1 sec
Sample Input 1:
7
1 2 4 5 3 6 7 
4 2 5 1 6 3 7 
Sample Output 1:
1 
2 3 
4 5 6 7 
Sample Input 2:
6
5 6 2 3 9 10 
2 6 3 9 5 10 
Sample Output 2:
5 
6 10 
2 3 
9 

Code:

/***********************************************************
	Following is the Binary Tree Node class structure

	template <typename T>
	class BinaryTreeNode {
    	public : 
    	T data;
    	BinaryTreeNode<T> *left;
    	BinaryTreeNode<T> *right;

    	BinaryTreeNode(T data) {
        	this -> data = data;
        	left = NULL;
        	right = NULL;
    	}
	};

***********************************************************/
BinaryTreeNode<int>* tree(int *pre, int *in, int ps, int pe, int is, int ie){
    
    if(ps>pe||is>ie)
        return NULL;
    
    BinaryTreeNode<int>* root = new BinaryTreeNode<int>(pre[ps]);
    
    int i=is;
    while(in[i]!=pre[ps]){
        i++;
    }
    
    int lps,lpe,rps,rpe,lis,lie,ris,rie;
    lis = is;
    lie = i-1;
    ris = i+1;
    rie = ie;
    lps = ps+1;
    lpe = lps+lie-lis;
    rps = lpe+1;
    rpe = pe;
    
    root->left = tree(pre,in,lps,lpe,lis,lie);
    root->right = tree(pre,in,rps,rpe,ris,rie);
    return root;
    
}

BinaryTreeNode<int>* buildTree(int *pre, int preLength, int *in, int inLength){
    return tree(pre,in,0,preLength-1,0,preLength-1);
}
class pair{
    public:
  	int height;
    int diameter;
};
int height(BinaryTreeNode<int> *root){
    if(root==NULL){
        return 0;
    }
    return 1+max(height((*root).left),height((*root).right));
}
int diameter(BinaryTreeNode<int>* root){
    if(root==NULL){
        return 0;
    }
    int option1=height((*root).left)+height((*root).right);
    int option2=diameter((*root).left);
    int option3=diameter((*root).right);
    return max(option1,max(option2,option3));
}
