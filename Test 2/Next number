Next Number
Send Feedback
Given a large number represented in the form of a linked list. Write code to increment the number by 1 in-place(i.e. without using extra space).
Note: You don't need to print the elements, just update the elements and return the head of updated LL.
Input Constraints:
1 <= Length of Linked List <=10^6.
Input format :
Line 1 : Linked list elements (separated by space and terminated by -1)
Output Format :
Line 1: Updated linked list elements 
Sample Input 1 :
3 9 2 5 -1
Sample Output 1 :
3 9 2 6
Sample Input 2 :
9 9 9 -1
Sample Output 1 :
1 0 0 0

Code:

/**********
 * Following is the Node class that is already written.
 
class Node{
public:
    int data;
    Node *next;
    Node(int data){
        this -> data = data;
        this -> next = NULL;
    }
};
 
*********/Node* except(Node *head){
    if(head -> next == NULL){
        head -> data++;
        return head;
    }
    head -> next = except(head -> next);
    if(head->next->data > 9)
    {
        head->next->data=0;
        head->data+=1;
    }
    return head;
}
Node* NextLargeNumber(Node *head) {
   head = except(head);
    
    if(head -> data > 9)      
    {
        Node *temp = new Node(1);
        head -> data = 0;
        temp -> next = head;
        head = temp;
    }
    return head;
}
/*Node* exception(Node *tail){
    Node *newnode=new Node(1);
    (*newnode).next=tail;
    //(*temp).data=0;
    return newnode;
}
Node* NextLargeNumber(Node *head) {*/
    /* Don't write main().
     * Don't read input, it is passed as function argument.
     * Return output and don't print it.
     * Taking input is handled automatically.
     */
    /*if(head==NULL){
        return head;
    }
    Node *temp=head;
    Node *prev=NULL;
    Node *tail=head;
    if((*temp).next==NULL){
        if((*temp).data==9){
            Node *newnode=new Node(1);
            (*newnode).next=temp;
            (*temp).data=0;
            return newnode;
        }
        (*temp).data++;
        return head;
    }
    while((*temp).next!=NULL){
        temp=(*temp).next;
    }
    tail=temp;
    temp=head;
    while((*temp).next!=tail){
        temp=(*temp).next;
    }
    prev=temp;
    temp=head;
    if((*tail).data<=8){
    	(*tail).data+=1;
    }
    else{
        while((*tail).data>8){
            if(tail==head){
                head=exception(tail);
                return head;
            }
            tail=prev;
            prev=head;
        	while((*prev).next!=tail){
            	prev=(*prev).next;
        	}
        }
        (*tail).data++;
    }
    return head;
}*/
