Bubble Sort (Iterative) LinkedList
Send Feedback
Given a singly linked list of integers, sort it using 'Bubble Sort.'
Note :
No need to print the list, it has already been taken care. Only return the new head to the list.
Input format :
The first and the only line of each test case or query contains the elements of the singly linked list separated by a single space.
Remember/Consider :
While specifying the list elements for input, -1 indicates the end of the singly linked list and hence, would never be a list element
Output format :
For each test case/query, print the elements of the sorted singly linked list.

Output for every test case will be printed in a seperate line.
Constraints :
0 <= M <= 10^3
Where M is the size of the singly linked list.

Time Limit: 1sec
Sample Input 1 :
10 9 8 7 6 5 4 3 -1
Sample Output 1 :
 3 4 5 6 7 8 9 10 
 Sample Output 2 :
10 -5 9 90 5 67 1 89 -1
Sample Output 2 :
-5 1 5 9 10 67 89 90 

Code:

/****************************************************************
 
    Following is the class structure of the Node class:

        class Node
        {
        public:
	        int data;
	        Node *next;
	        Node(int data)
	        {
		        this->data = data;
		        this->next = NULL;
	        }
        };

*****************************************************************/
/*void swap(Node *prev, Node *curr, Node *ahead){
    prev->next=curr->next;
    curr->next=ahead->next;
    ahead->next=curr;
}*/
int length(Node *head){
    Node *temp=head;
    int count=0;
    while(temp!=NULL){
        count++;
        temp=(*temp).next;
    }
    return count;
}
Node *bubbleSort(Node *head){
	// Write your code here
    if(head==NULL||(*head).next==NULL){
        return head;
    }
    Node *prev=NULL;
    Node *curr=head;
 /*   Node *ahead=(*head).next;
    int count=length(head);
    int i,j=1;
    while(j<count-1){
        i=1;
        prev=NULL;
    	curr=head;
    	ahead=(*head).next;
        while(i<count-j){
            if(i==1){
                if((*curr).data<(*ahead).data){
                    int temp=(*curr).data;
                    (*curr).data=(*ahead).data;
                    (*ahead).data=temp;
                }
            }
            else{
                if((*curr).data<(*ahead).data){
                	swap(prev,curr,ahead);
                }
            }
            i++;
            prev=curr;
            curr=ahead;
            if(ahead!=NULL){
                ahead=(*ahead).next;
            }
        }
        j++;
    }*/
     for(int i=0;i<length(head);i++)
    {
        
               while(curr->next!=NULL)
               {  Node *Next=curr->next;
                       if(curr->data > Next->data)
                         {
                                if(prev==NULL)
                                  {
                                   curr->next=Next->next;
                                   Next->next=curr;
                                   prev=Next;
                                    head=prev;//observed after dry run
                                    //after swapping when dry run next goes back and curr reaches next which is reqd no need to change
                                   }
                               else
                                {
                                 prev->next=curr->next;
                                 curr->next=Next->next;
                                 Next->next=curr;
                                 prev=Next;
                                 }
            
                        }
                     else
                     {
                     prev=curr;
                     curr=Next;  
                     }
              }
        prev=NULL;
        curr=head;
    }
    return head; 
}
