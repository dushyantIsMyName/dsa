Quick Sort Code
Send Feedback
Sort an array A using Quick Sort.
Change in the input array itself. So no need to return or print anything.


Input format :
Line 1 : Integer n i.e. Array size
Line 2 : Array elements (separated by space)
Output format :
Array elements in increasing order (separated by space)
Constraints :
1 <= n <= 10^3
Sample Input 1 :
6 
2 6 8 5 4 3
Sample Output 1 :
2 3 4 5 6 8
Sample Input 2 :
5
1 5 2 7 3
Sample Output 2 :
1 2 3 5 7 

Code:

/*
	To apply the method explained in the hint video, we have to add two more parameters in the function call. This can be done by calling a helper function from given function. The helper function can have three parameters: array, start index, end index.  
	
	Skeleton code to achieve this:
	#include <iostream>
	using namespace std;
	
	void quickSort(int input[], int start, int end)
	{
    		// your code goes here 
	}
	void quickSort(int input[], int size)
	{
    		quickSort(input, 0, size - 1);
	}
		
*/
int partition(int input[], int si, int ei){
    int x=input[si];
    int count=0;
    for(int i=si+1;i<=ei;i++){
        if(input[i]<=x){
            count++;
        }
    }
    int temp=input[si+count];
    input[si+count]=x;
    input[si]=temp;
    int i=si;
    int j=ei;
    while(i<si+count && j>si+count){
        if(input[i]<=x){
            i++;
        }
        else if(input[j]>x){
            j--;
        }
        else{
            int tempo=input[i];
            input[i]=input[j];
            input[j]=tempo;
            i++;
            j--;
        }
    }
    return si+count;
}
void quickSort(int input[], int si, int ei){
    if(si>=ei){
        return;
    }
    int c=partition(input,si,ei);
    quickSort(input, si, c-1);
    quickSort(input,c+1,ei);
}
void quickSort(int input[], int size) {
  /* Don't write main().
     Don't read input, it is passed as function argument.
     Change in the given array itself.
     Taking input and printing output is handled automatically.
  */
	int si=0;
    int ei=size-1;
    quickSort(input,si,ei);
}
